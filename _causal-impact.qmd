# And now...to Bayesian Things {background-color="#065CBC33"}

# Specifically, Bayesian Structural Time-Series {background-color="#065CBC33"}

# Think "time-series decomposition turned up to 11" {background-color="#065CBC33"}

## Mark Edmondson built a tool using this [7 years ago]{.underline}! {background-color="#065CBC33"}

![](images/ga_effect.png)

## At its core: estimate the impact of an intervention {background-color="#065CBC33"}

## "We didn't test it, so can we just do a pre-/post- analysis?" {background-color="#065CBC33"}

## What the marketer expects happened {background-color="#065CBC33" transition="fade"}

```{r}
#| dev.args: !expr 'list(bg="transparent")'

# Number of days in the "post" period
num_days_post <- 20
int_date <- Sys.Date()-num_days_post

df <- get_ts(base = 10000, noise = 0.05, intervention_date = int_date,
                                     intervention_effect = 0.35) 

ggplot(df, aes(x = date, y = value)) +
  geom_line(color = s_line_1, linewidth = 1.1) +
  geom_vline(aes(xintercept = int_date), color = "white", linetype = "dashed",
            linewidth = 1.5) +
  scale_y_continuous(expand = c(0,0), limits = ~ c(0, max(.x) * 1.1), label = comma) +
  theme_main +
  theme(axis.title.y = element_blank())

```

## Typically, the change isn't [that]{.underline} big... {background-color="#065CBC33" transition="fade"}

```{r}
#| dev.args: !expr 'list(bg="transparent")'

df <- get_ts(base = 10000, noise = 0.05, intervention_date = int_date,
                                     intervention_effect = 0.15) 

ggplot(df, aes(x = date, y = value)) +
  geom_line(color = s_line_1, linewidth = 1.1) +
  geom_vline(aes(xintercept = int_date), color = "white", linetype = "dashed",
            linewidth = 1.5) +
  scale_y_continuous(expand = c(0,0), limits = ~ c(0, max(.x) * 1.1), label = comma) +
  theme_main+
  theme(axis.title.y = element_blank())

```

## ...and the data is a [lot noisier]{.underline}... {background-color="#065CBC33" transition="fade"}

```{r}
#| dev.args: !expr 'list(bg="transparent")'

df <- get_ts(base = 10000, noise = 0.15, intervention_date = int_date,
                                     intervention_effect = 0.15) 

ggplot(df, aes(x = date, y = value)) +
  geom_line(color = s_line_1, linewidth = 1.1) +
  geom_vline(aes(xintercept = int_date), color = "white", linetype = "dashed",
            linewidth = 1.5) +
  scale_y_continuous(expand = c(0,0), limits = ~ c(0, max(.x) * 1.1), label = comma) +
  theme_main +
  theme(axis.title.y = element_blank())

```

## ...and may have [seasonality]{.underline}! {background-color="#065CBC33" transition="fade"}

```{r}
#| dev.args: !expr 'list(bg="transparent")'

df <- get_ts(base = 10000, noise = 0.15, intervention_date = int_date,
             week_season = TRUE, intervention_effect = 0.15) 

# Get a covariate
df_cov <- get_ts(base = 3000, noise = 0.1, week_season = TRUE) |> 
  rename(covariate = value)

# Add the covariate to the data for later user
df <- df |> 
  left_join(df_cov)

ggplot(df, aes(x = date, y = value)) +
  geom_line(color = s_line_1, linewidth = 1.1) +
  geom_vline(aes(xintercept = int_date), color = "white", linetype = "dashed",
            linewidth = 1.5) +
  scale_y_continuous(expand = c(0,0), limits = ~ c(0, max(.x) * 1.1), label = comma) +
  theme_main +
  theme(axis.title.y = element_blank())

```

# CausalImpact uses [historical data]{.underline} to forecast [what's expected]{.underline} {background-color="#065CBC33"}

## Step 1: Look at the [pre-intervention] data {background-color="#065CBC33" transition="fade}

```{r}
#| dev.args: !expr 'list(bg="transparent")'

df_ci <- df

# Run the actual model
ci_model <- CausalImpact(df_ci$value,
                     pre.period = c(1, nrow(df_ci) - num_days_post),
                     post.period = c(nrow(df_ci) - num_days_post + 1, nrow(df_ci)),
                     model.args = list(nseasons = 7,
                                       season.duration = 1,
                                       dynamic.regression = TRUE))

# Run it with a covariate
ci_model_w_cov <- CausalImpact(df_ci[,2:3],
                     pre.period = c(1, nrow(df_ci) - num_days_post),
                     post.period = c(nrow(df_ci) - num_days_post + 1, nrow(df_ci)),
                     model.args = list(nseasons = 7,
                                       season.duration = 1,
                                       dynamic.regression = TRUE))

# Make the results a data frame and add the date column back in
ci_df <- as.data.frame(ci_model$series)
ci_df$date <- df$date 
ci_df <- ci_df |> relocate(date) |> 
  # Add column versions with the "post" wiped out for plotting
  mutate(response_pre = ifelse(date > int_date, NA, response),
         point.pred_pre = ifelse(date > int_date, NA, point.pred),
         point.pred.lower_pre = ifelse(date > int_date, NA, point.pred.lower),
         point.pred.upper_pre = ifelse(date > int_date, NA, point.pred.upper))

# Plot just the base data up to the intervention
ggplot(ci_df, aes(x = date, y = response_pre)) +
  geom_line(color = s_line_1, linewidth = 1.1) +
  geom_vline(aes(xintercept = int_date), color = "white", linetype = "dashed",
            linewidth = 1) +
  scale_y_continuous(expand = c(0,0), 
                     limits = ~ c(0, max(ci_df$response) * 1.1), label = comma) +
  theme_main +
  theme(axis.title.y = element_blank())

```

## Step 2: Build a best-fit model using this data {background-color="#065CBC33" transition="fade}

```{r}
#| dev.args: !expr 'list(bg="transparent")'

# Add the modeled estimate to it
ggplot(ci_df, aes(x = date, y = response_pre)) +
  geom_line(color = s_line_1, linewidth = 1.1) +
  geom_line(aes(y = point.pred_pre), color = "white", linewidth = 1.1, linetype = "dashed") +
  geom_vline(aes(xintercept = int_date), color = "white", linetype = "dashed",
            linewidth = 1) +
  scale_y_continuous(expand = c(0,0), 
                     limits = ~ c(0, max(ci_df$response) * 1.1), label = comma) +
  theme_main +
  theme(axis.title.y = element_blank())

```
## Step 3: That model can [quantify its uncertainty]{.underline} {background-color="#065CBC33" transition="fade}

```{r}
#| dev.args: !expr 'list(bg="transparent")'

# Add the confidence interval around it
ggplot(ci_df, aes(x = date, y = response_pre)) +
  geom_ribbon(aes(ymin = point.pred.lower_pre, ymax = point.pred.upper_pre),
              fill = "yellow", alpha = 0.2) +
  geom_line(color = s_line_1, linewidth = 1.1) +
  geom_line(aes(y = point.pred_pre), color = "white", linewidth = 1.1, linetype = "dashed") +
  geom_vline(aes(xintercept = int_date), color = "white", linetype = "dashed",
            linewidth = 1) +
  scale_y_continuous(expand = c(0,0), 
                     limits = ~ c(0, max(ci_df$response) * 1.1), label = comma) +
  theme_main +
  theme(axis.title.y = element_blank())

```

## Step 4: Extend the model [post-intervention]{.underline} {background-color="#065CBC33" transition="fade}

```{r}
#| dev.args: !expr 'list(bg="transparent")'

# Extend out post-intervention
ggplot(ci_df, aes(x = date, y = response_pre)) +
  geom_ribbon(aes(ymin = point.pred.lower, ymax = point.pred.upper),
              fill = "yellow", alpha = 0.2) +
  geom_line(color = s_line_1, linewidth = 1.1) +
  geom_line(aes(y = point.pred), color = "white", linewidth = 1.1, linetype = "dashed") +
  geom_vline(aes(xintercept = int_date), color = "white", linetype = "dashed",
            linewidth = 1) +
  scale_y_continuous(expand = c(0,0), 
                     limits = ~ c(0, max(ci_df$response) * 1.1), label = comma) +
  theme_main +
  theme(axis.title.y = element_blank())

```

## Step 5: Compare the model to the [actual results]{.underline} {background-color="#065CBC33" transition="fade}

```{r}
#| dev.args: !expr 'list(bg="transparent")'

# Extend out post-intervention
ggplot(ci_df, aes(x = date, y = response)) +
  geom_ribbon(aes(ymin = point.pred.lower, ymax = point.pred.upper),
              fill = "yellow", alpha = 0.2) +
  geom_line(color = s_line_1, linewidth = 1.1) +
  geom_line(aes(y = point.pred), color = "white", linewidth = 1.1, linetype = "dashed") +
  geom_vline(aes(xintercept = int_date), color = "white", linetype = "dashed",
            linewidth = 1) +
  scale_y_continuous(expand = c(0,0), 
                     limits = ~ c(0, max(ci_df$response) * 1.1), label = comma) +
  theme_main +
  theme(axis.title.y = element_blank())

```

# "Pointwise" is another way to look at the results {background-color="#065CBC33"}

## Set the [modeled prediction]{.underline} as the baseline {background-color="#065CBC33" transition="fade}

```{r}
#| dev.args: !expr 'list(bg="transparent")'

ggplot(ci_df, aes(x = date, y = point.effect)) +
  geom_hline(aes(yintercept = 0), color = "white", linewidth = 1.1, linetype = "dashed") +
  geom_vline(aes(xintercept = int_date), color = "white", linetype = "dashed",
            linewidth = 1) +
  scale_y_continuous(expand = c(0,0), 
                     limits = ~ c(min(ci_df$point.effect.lower) * 1.1, 
                                  max(ci_df$point.effect.upper) * 1.1), label = comma) +
  theme_main +
  theme(axis.title.y = element_blank(),
        axis.title.x = element_blank(),
        axis.line.x = element_blank())

```

## Plot the [difference]{.underline} between the model & the actual {background-color="#065CBC33" transition="fade}

```{r}
#| dev.args: !expr 'list(bg="transparent")'

ggplot(ci_df, aes(x = date, y = point.effect)) +
  geom_hline(aes(yintercept = 0), color = "white", linewidth = 1.1, linetype = "dashed") +
  geom_line(color = s_line_1, linewidth = 1.1) +
  geom_vline(aes(xintercept = int_date), color = "white", linetype = "dashed",
            linewidth = 1) +
  scale_y_continuous(expand = c(0,0), 
                     limits = ~ c(min(ci_df$point.effect.lower) * 1.1, 
                                  max(ci_df$point.effect.upper) * 1.1), label = comma) +
  theme_main +
  theme(axis.title.y = element_blank(),
        axis.title.x = element_blank(),
        axis.line.x = element_blank())

```

## Put the confidence interval around the [difference]{.underline} {background-color="#065CBC33" transition="fade}

```{r}
#| dev.args: !expr 'list(bg="transparent")'

# Extend out post-intervention
ggplot(ci_df, aes(x = date, y = point.effect)) +
  geom_ribbon(aes(ymin = point.effect.lower, ymax = point.effect.upper),
              fill = "yellow", alpha = 0.2) +
  geom_hline(aes(yintercept = 0), color = "white", linewidth = 1.1, linetype = "dashed") +
  geom_line(color = s_line_1, linewidth = 1.1) +
  geom_vline(aes(xintercept = int_date), color = "white", linetype = "dashed",
            linewidth = 1) +
  scale_y_continuous(expand = c(0,0), 
                     limits = ~ c(min(ci_df$point.effect.lower) * 1.1, 
                                  max(ci_df$point.effect.upper) * 1.1), label = comma) +
  theme_main +
  theme(axis.title.y = element_blank(),
        axis.title.x = element_blank(),
        axis.line.x = element_blank())

```
# Or...by the numbers! {background-color="#065CBC33"}

# Posterior tail-area probability p: `r ci_model$summary$p[1]`

# Estimated average (daily) effect: `r format(round(ci_model$summary$AbsEffect[1]), big.mark = ",")` with a 95% confidence interval of `r format(round(ci_model$summary$AbsEffect.lower[1]), big.mark = ",")` to `r format(round(ci_model$summary$AbsEffect.upper[1]), big.mark = ",")` 

# But, wait! There's more! {background-color="#065CBC33"}

# Let's put [covariates]{.underline} to use. {background-color="#065CBC33"}

## Two criteria for any covariates {background-color="#065CBC33"}

1. Their relationship to the metric of interest is stable
2. They are not themselves affected by the intervention

## Covariates require [critical thought]{.underline} and [creativity]{.underline} {background-color="#065CBC33"}

Sessions
Housing starts
Google Trends

## Back to our original example {background-color="#065CBC33"}

This is without any covariates included.

(Include statistical measures...)

## Let's add a covariate {background-color="#065CBC33"}

And, with one really solid covariate.

(Include statistical measures...)

# This is not a silver bullet! {background-color="#065CBC33"}


