# [One]{.underline} Antidote to Non-Stationarity: First Differences {background-color="#0816647C"}

## Are these two metrics correlated? {background-color="#0816647C"}

```{r}
#| dev.args: !expr 'list(bg="transparent")'
#| fig.height: 6

s1 <- get_ts(base = 10000, noise = 0.1, start = Sys.Date() - 45, trend = 0.5) |> 
  mutate(value = round(value),
         metric = "orders")
s2 <- get_ts(base = 6000, noise = 0.1, start = Sys.Date() - 45, trend = 0.9) |> 
  mutate(value = round(value),
         metric = "social")

# bind_rows() throws an error when trying to combine s1 and s2 as tsibbles
df_first_diff <- bind_rows(as_tibble(s1), as_tibble(s2))

ggplot(df_first_diff, aes(x = date, y = value, color = metric)) +
  geom_line(linewidth = 1.1) +
  scale_y_continuous(expand = c(0,0), limits = ~ c(0, max(.x) * 1.1), label = comma) +
  scale_color_manual(values = c(s_line_1, s_line_2), 
                     labels = c("Orders", "Social Media Engagements")) +
  theme_main +
  theme(legend.position = "top",
        legend.title = element_blank(),
        axis.title.y = element_blank())

```

## To the scatterplot! {background-color="#0816647C"}

```{r}
#| dev.args: !expr 'list(bg="transparent")'
#| fig.height: 6

df_fd_scatter <- df_first_diff |>
  pivot_wider(names_from = metric, values_from = value)

ggplot(df_fd_scatter, aes(x = social, y = orders)) +
  geom_point(color = s_line_1, size = 2) +
  scale_x_continuous(expand = c(0,0), limits = ~ c(min(.x) * 0.95, max(.x) * 1.05),
                     label = comma) +
  scale_y_continuous(expand = c(0,0), limits = ~ c(min(.x) * 0.95, max(.x) * 1.05),
                     label = comma) +
  labs(x = "Social Media Engagements",
       y = "Orders") +
  theme_main +
  theme(axis.title.x = element_text(family = "s_font", size = s_axis_title_size,
                                    face = "bold", colour = s_labels,
                                    margin = margin(8, 0, 0, 0, "pt")),
        axis.line.y = element_line(color = "white"),
        panel.grid.major.y = element_blank())

```

. . .

::: {.absolute top="195" left="170" .h2-chars}
R^2^ = `r cor(df_fd_scatter$social, df_fd_scatter$orders)^2 |> round(2)`
:::

#

:::: {.columns}
::: {.column width="50%"}
![DALL-E 2: "A puppy nodding its head with a speech bubble saying "YES!", digital art"](images/puppy_yes.png)
:::

::: {.column width="50%"}
::: {.fragment}
![DALL-E 2: "A puppy shaking its head with a speech bubble that has the exact text "Maybe!", digital art"](images/puppy_maybe.png)
:::
:::
::::

# If they're correlated, then when one [moves]{.underline}, the other will [move similarly]{.underline}. {background-color="#0816647C"}

# When one metric [increases]{.underline}, the other should [increase similarly]{.underline}. {background-color="#0816647C"}

# When one metric [decreases]{.underline}, the other should [decrease similarly]{.underline}. {background-color="#0816647C"}

# So, let's look at the [changes]{.underline} rather than the [actual values]{.underline}. {background-color="#0816647C"}

## This is called [first differences]{.underline}. {background-color="#0816647C" transition="none"}

:::: {.columns}
::: {.column width="60%"}

```{r}
#| dev.args: !expr 'list(bg="transparent")'

# Calculate first differences
df_fd_scatter <- df_fd_scatter |> 
  mutate(orders_diff = orders - lag(orders, 1),
         social_diff = social - lag(social, 1))

df_fd_slice <- head(df_fd_scatter, 7) |> 
  select(date, orders, orders_diff, social, social_diff) |> 
  rename(Date = date, Orders = orders, `1st Diff: Orders` = orders_diff,
         Social = social, `1st Diff: Social` = social_diff)

# Start with just orders
df_fd_slice |> select(Date, Orders) |> mutate(`1st Diff: Orders` = "") |> 
  gt() |> 
  fmt_number(columns = Orders,
             decimals = 0) 

```

:::
::::

## This is called [first differences]{.underline}. {background-color="#0816647C" transition="none"}

:::: {.columns}
::: {.column width="60%"}

```{r}
#| dev.args: !expr 'list(bg="transparent")'

# Start with just orders
df_fd_slice |> select(Date, Orders) |> 
  mutate(`1st Diff: Orders` = "") |> 
  gt() |> 
  fmt_number(columns = Orders,
             decimals = 0) |> 
  tab_style(
    style = list(cell_fill(color = "#FFFF007C")),
    locations = cells_body(
      columns = Orders,
      rows = c(3,4)
    ))

```

:::
::::

## This is called [first differences]{.underline}. {background-color="#0816647C" transition="none"}

:::: {.columns}
::: {.column width="60%"}

```{r}
#| dev.args: !expr 'list(bg="transparent")'

# Start with just orders
df_fd_slice |> select(Date, Orders, `1st Diff: Orders`) |> 
  mutate(`1st Diff: Orders` = if_else(row_number() == 4,
                                     format(`1st Diff: Orders`, big.mark = ","), "")) |> 
  gt() |> 
  fmt_number(columns = Orders,
             decimals = 0) |> 
  tab_style(
    style = list(cell_fill(color = "#FFFF007C")),
    locations = cells_body(
      columns = Orders,
      rows = c(3,4)
    )) |> 
  tab_style(
    style = list(cell_fill(color = "#FFFF007C")),
    locations = cells_body(
      columns = `1st Diff: Orders`,
      rows = 4
    ))
  
```

:::
::::

## This is called [first differences]{.underline}. {background-color="#0816647C" transition="none"}

:::: {.columns}
::: {.column width="60%"}

```{r}
#| dev.args: !expr 'list(bg="transparent")'

# Start with just orders
df_fd_slice |> select(Date, Orders, `1st Diff: Orders`) |> 
  gt() |> 
  fmt_number(columns = c(Orders, `1st Diff: Orders`),
             decimals = 0) 
  
```

:::
::::
  
## From [non-stationary]{.underline} to [more stationary]{.underline} {background-color="#0816647C"}

::: {.fragment}
```{r}
#| dev.args: !expr 'list(bg="transparent")'
#| fig.height: 3

ggplot(df_fd_scatter, aes(x = date, y = orders)) +
  geom_line(linewidth = 1.1, color = s_line_1) +
  scale_y_continuous(expand = c(0,0), limits = ~ c(0, max(.x) * 1.1), label = comma) +
  labs(title = "Orders") +
  theme_main +
  theme(axis.text.x = element_blank(),
        axis.title.y = element_blank())
```
:::
::: {.fragment}

```{r}
#| dev.args: !expr 'list(bg="transparent")'
#| fig.height: 3

ggplot(df_fd_scatter, aes(x = date, y = orders_diff)) +
  geom_hline(aes(yintercept = 0), color="white") +
  geom_line(linewidth = 1.1, color = s_line_1) +
  scale_y_continuous(expand = c(0,0), limits = ~ c(min(.x) * 1.1, max(.x) * 1.1), label = comma) +
  labs(title = "First Difference: Orders") +
  theme_main +
  theme(axis.text.x = element_blank(),
        axis.title.y = element_blank(),
        axis.line.x = element_blank())
```
:::

## We can calculate first differences for both metrics {background-color="#0816647C"}

```{r}
#| dev.args: !expr 'list(bg="transparent")'

# Start with just orders
df_fd_slice |> 
  gt() |> 
  fmt_number(columns = !matches("Date"),
             decimals = 0)

```

## And [then]{.underline} check the correlation! {background-color="#0816647C"}
  
```{r}
#| dev.args: !expr 'list(bg="transparent")'
#| fig.height: 6

ggplot(df_fd_scatter, aes(x = social_diff, y = orders_diff)) +
  geom_point(color = s_line_1, size = 2) +
  labs(x = "Social Media Engagement First Difference",
       y = "Orders First Difference") +
  scale_x_continuous(expand = c(0,0), limits = ~ c(min(.x) * 0.95, max(.x) * 1.05), 
                     label = comma) +
  scale_y_continuous(expand = c(0,0), limits = ~ c(min(.x) * 0.95, max(.x) * 1.05), 
                     label = comma) +
  theme_main +
  theme(axis.title.x = element_text(family = "s_font", size = s_axis_title_size,
                                    face = "bold", colour = s_labels,
                                    margin = margin(8, 0, 0, 0, "pt")),
        axis.line.y = element_line(color = "white"),
        panel.grid.major.y = element_blank())


```

. . .

::: {.absolute top="195" left="170" .h2-chars}
R^2^ = `r cor(df_fd_scatter$orders_diff, df_fd_scatter$social_diff, use = "pairwise.complete.obs")^2 |> round(2) |> format(nsmall = 2)`
:::

## {background-color="#0816647C"}

:::: {.columns .v-center-container}
::: {.column width="40%"}
[These are both moving with time...but [not directly with each other]{.underline}]{.h2-chars}
:::

::: {.column width="60%"}
![DALL-E 2: "A puppy running a race where the other runner is a clock, digital art"](images/puppy_race_clock.png)
:::
::::
